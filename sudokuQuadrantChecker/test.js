const tester = require('./sudokuQuadrantChecker');

const testCases = [
  // [testCase, expectedOutput]
  [
    [
      '(1,2,3,4,5,6,7,8,1)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(1,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
    ],
    '1,3,4',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,1,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,9)',
    ],
    '3,4,5,9',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,1,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
    ],
    '4,5',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,5,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,8)',
    ],
    'legal',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,5,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,4)',
      '(9,1,2,3,4,5,6,7,8)',
    ],
    'legal',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,5,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,9)',
      '(9,1,2,3,4,5,6,7,8)',
    ],
    '3,9',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,5,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,9)',
      '(9,1,2,3,4,5,6,7,8)',
    ],
    '3,6,9',
  ],
  [
    [
      '(9,2,3,4,5,6,7,8,9)',
      '(x,x,x,x,x,x,x,x,x)',
      '(6,x,5,x,3,x,x,4,x)',
      '(2,x,1,5,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,1)',
      '(x,x,x,x,x,x,x,x,2)',
      '(9,1,2,3,4,5,6,7,8)',
    ],
    '1,3,7',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(4,5,6,x,x,x,x,x,x)',
      '(7,8,9,x,x,x,x,x,x)',
      '(2,3,4,x,x,x,x,x,x)',
      '(5,6,7,x,x,x,x,x,x)',
      '(8,9,1,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,1)',
    ],
    'legal',
  ],
  [
    [
      '(1,2,3,4,5,6,7,8,9)',
      '(4,5,6,1,2,3,x,x,x)',
      '(7,8,9,x,x,6,x,x,x)',
      '(2,3,4,x,x,x,x,x,x)',
      '(5,6,7,x,x,x,x,x,x)',
      '(8,9,1,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,x)',
      '(x,x,x,x,x,x,x,x,1)',
    ],
    '2',
  ],
];

let testRes;
testCases.forEach((test) => {
  testRes = tester(test[0]);
  if (testRes === test[1]) console.log('\x1b[36m%s\x1b[0m', 'True');
  else console.log('\x1b[41m%s\x1b[0m', 'False : ' + test[0] + ' ==> ' + testRes);
});
